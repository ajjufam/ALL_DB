************************************************************************************
====================================================================================

üîÅ QUICK COMPARISON

| Feature        | MongoDB                      | PostgreSQL                  | MySQL                   |
| -------------- | ---------------------------- | --------------------------- | ----------------------- |
| Type           | NoSQL (Document-based)       | SQL (Relational)            | SQL (Relational)        |
| Schema         | Dynamic                      | Strict                      | Strict                  |
| Query Language | Mongo Query Language (MQL)   | SQL                         | SQL                     |
| Best for       | Unstructured / flexible data | Complex queries & relations | Simpler relational data |

************************************************************************************
====================================================================================
‚öôÔ∏è 1. SETUP AND CONNECTION
üì¶ MongoDB
Library: mongoose
* npm install mongoose
*==>
const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/testdb')
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error(err));

üêò PostgreSQL
Library: pg or sequelize
* npm install pg
*==>
const { Pool } = require("pg");
require("dotenv").config();

const pool = new Pool({
  connectionString: 'postgresql://postgres:admin@localhost:5432/DB_NAME',
});

module.exports = pool;

üê¨ MySQL
Library: mysql2 or sequelize
* npm install mysql2
*==>
const mysql = require('mysql2');

const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  database: 'testdb',
  password: 'yourpassword'
});

connection.connect(err => {
  if (err) throw err;
  console.log('MySQL connected');
});
************************************************************************************
====================================================================================

üß± 2. SCHEMA CREATION
üì¶ MongoDB (Mongoose Schema)
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  age: Number
});

const User = mongoose.model('User', userSchema);

üêò PostgreSQL (CREATE TABLE)
**
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100),
  age INT
);


** Node.js (optional raw SQL execution):
client.query(`
  CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    age INT
  )
`);

üê¨ MySQL (CREATE TABLE)
**
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100),
  age INT
);

** Node.js (optional raw SQL execution):
connection.query(`
  CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    age INT
  )
`);
************************************************************************************
====================================================================================

üîÑ CRUD OPERATIONS

************************************************************************************
====================================================================================
‚úÖ POST (Create Data)
MongoDB
const user = new User({ name: 'Alice', email: 'a@example.com', age: 25 });
await user.save();

PostgreSQL
await client.query('INSERT INTO users(name, email, age) VALUES($1, $2, $3)', ['Alice', 'a@example.com', 25]);

MySQL
connection.query('INSERT INTO users (name, email, age) VALUES (?, ?, ?)', ['Alice', 'a@example.com', 25]);

************************************************************************************
====================================================================================
üì• GET (Read Data)
MongoDB
const users = await User.find();

PostgreSQL
const res = await client.query('SELECT * FROM users');
console.log(res.rows);

MySQL
connection.query('SELECT * FROM users', (err, results) => {
  console.log(results);
});

************************************************************************************
====================================================================================
üõ†Ô∏è UPDATE
MongoDB
await User.updateOne({ name: 'Alice' }, { age: 30 });

PostgreSQL
await client.query('UPDATE users SET age = $1 WHERE name = $2', [30, 'Alice']);

MySQL
connection.query('UPDATE users SET age = ? WHERE name = ?', [30, 'Alice']);

************************************************************************************
====================================================================================
‚ùå DELETE
MongoDB
await User.deleteOne({ name: 'Alice' });

PostgreSQL
await client.query('DELETE FROM users WHERE name = $1', ['Alice']);

MySQL
connection.query('DELETE FROM users WHERE name = ?', ['Alice']);

************************************************************************************
====================================================================================

üéØ TOP 10 INTERVIEW QUESTIONS FOREACH

************************************************************************************
====================================================================================
MongoDB

1. What is the difference between MongoDB and a relational database?
    MongoDB is a NoSQL document database that stores data in flexible JSON-like documents.
    Relational databases store structured data in tables with predefined schemas and use SQL.

2. How do you define a schema in Mongoose?
    Use mongoose.Schema to define the structure, types, and validations for documents.
    Example: const userSchema = new mongoose.Schema({ name: String, age: Number });

3. What are the differences between find(), findOne(), and findById()?
    find() returns all matching documents as an array.
    findOne() returns the first matching document; 
    findById() finds by _id.

4. What are MongoDB indexes, and why are they important?
    Indexes improve the speed of read operations by allowing efficient queries.
    They can be added on one or more fields using createIndex().

5. Explain MongoDB‚Äôs aggregation pipeline.
    The aggregation pipeline processes documents through stages like $match, $group, $sort, etc.
    It's used for data transformation, grouping, and analytics-like operations.

6. How does MongoDB handle relationships?
    MongoDB uses embedding for one-to-few and referencing (ObjectId) for one-to-many or many-to-many.
    No joins by default, but populate() in Mongoose helps simulate joins.

7. What is the purpose of ObjectId in MongoDB?
    ObjectId is a unique 12-byte identifier used as the default primary key (_id).
    It ensures uniqueness and encodes time and machine info for sorting.

8. How do you perform data validation in Mongoose?
    Validation rules are defined in the schema using options like required, min, match, etc.
    Mongoose validates data before saving to MongoDB.

9. How do you handle transactions in MongoDB?
    Use session.startTransaction() with replica sets or sharded clusters to ensure atomicity.
    Transactions allow multiple operations to be committed or rolled back together.

10. How do you handle schema-less design issues?
    Use Mongoose schemas to enforce structure and validation even though MongoDB is schema-less.
    Design carefully to avoid inconsistencies, especially with embedded or referenced data.

************************************************************************************
====================================================================================
PostgreSQL

1. What are the advantages of PostgreSQL over other SQL databases?
    PostgreSQL supports advanced features like JSON, full-text search, custom functions, and window functions.
    It is highly extensible, open-source, and known for strong ACID compliance and complex query support.

2. Explain the difference between SERIAL, BIGSERIAL, and UUID as primary keys.
    SERIAL auto-increments a 32-bit integer, BIGSERIAL uses a 64-bit integer for larger ranges.
    UUID generates universally unique identifiers, suitable for distributed systems.

3. How do you perform a JOIN operation in PostgreSQL?
    Use SQL JOIN clauses like INNER JOIN, LEFT JOIN, etc., to combine rows from multiple tables.
    Example: SELECT * FROM users u JOIN orders o ON u.id = o.user_id;

4. How does PostgreSQL handle ACID compliance?
    PostgreSQL ensures Atomicity, Consistency, Isolation, and Durability through transactions.
    It uses WAL (Write-Ahead Logging) to maintain data integrity.

5. What are stored procedures and triggers?
    Stored procedures are reusable SQL blocks executed with a call; triggers run automatically on events.
    Triggers are useful for logging, auditing, or enforcing constraints.

6. How do you manage migrations in PostgreSQL with Node.js?
    Use tools like knex, sequelize, or node-pg-migrate to define and run schema changes.
    They track migration history and ensure version control of your database.

7. What is the use of RETURNING in SQL?
    RETURNING lets you fetch inserted, updated, or deleted rows directly in the same SQL query.
    Example: INSERT INTO users(name) VALUES('A') RETURNING *;

8. How does PostgreSQL handle JSON and JSONB?
    PostgreSQL supports both JSON (text-based) and JSONB (binary, indexed) column types.
    JSONB is faster for queries and indexing, making it suitable for structured JSON data.

9. How can you create an index and why?
    Indexes improve query performance by allowing faster search on specific columns.
    Syntax: CREATE INDEX idx_name ON table(column);

10. What are CTEs (Common Table Expressions) and how are they useful?
    CTEs allow defining temporary result sets using WITH, improving readability and reusability.
    They support recursive queries and help break down complex queries.

************************************************************************************
====================================================================================
MySQL

1. What‚Äôs the difference between MySQL and PostgreSQL?
    MySQL is known for speed and ease of use, while PostgreSQL is more feature-rich and standards-compliant.
    PostgreSQL supports advanced features like full ACID, JSONB, and custom functions better than MySQL.

2. How do you optimize a slow query in MySQL?
    Use EXPLAIN to analyze the query execution plan and identify bottlenecks.
    Add indexes, avoid SELECT *, and optimize joins and subqueries.

3. What are the different JOIN types in MySQL?
    MySQL supports INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN (with workarounds), and CROSS JOIN.
    Each determines how rows from related tables are combined.

4. How do transactions work in MySQL?
    Transactions group SQL operations into a single unit using START TRANSACTION, COMMIT, and ROLLBACK.
    They ensure ACID properties, mainly when using InnoDB storage engine.

5. What‚Äôs the difference between CHAR and VARCHAR?
    CHAR is fixed-length and space-padded, ideal for consistent-length data like codes.
    VARCHAR is variable-length, saving space for strings of varying size.

6. How can you prevent SQL injection in Node.js + MySQL?
    Use parameterized queries or prepared statements via libraries like mysql2 or sequelize.
    Never interpolate user input directly into SQL strings.

7. What are stored procedures, and when do you use them?
    Stored procedures are precompiled SQL code blocks stored in the database for reuse.
    They improve performance and centralize logic, especially for complex or repeated tasks.

8. How does MySQL handle indexing?
    MySQL creates indexes on columns to speed up SELECT and JOIN queries.
    Indexes can be single or multi-column, full-text, or spatial depending on the use case.

9. What is the default storage engine and why?
    InnoDB is the default storage engine because it supports transactions, foreign keys, and crash recovery.
    It ensures reliability and performance for most modern applications.

10. How do you perform pagination in SQL?
    Use LIMIT and OFFSET to fetch a specific set of rows.
    Example: SELECT * FROM users LIMIT 10 OFFSET 20;

************************************************************************************
====================================================================================